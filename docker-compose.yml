services:

  mysql:
    image: mysql:8.0.39  # Using official MySQL 8.0.39 image
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3306:3306"  # Exposing MySQL port
    volumes:
      - mysql-data:/var/lib/mysql  # Persisting MySQL data across restarts
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      retries: 5
      start_period: 30s
      timeout: 10s

  backend:
    build:
      context: ./backend  # The folder where backend Dockerfile is located
    container_name: backend
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}  # Setting the root password for MySQL
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    ports:
      - "3030:3030"  # Exposing backend port
    depends_on:
      - mysql  # Backend depends on MySQL to start first
    volumes:
      - ./backend:/usr/src/app  # Mounting the backend folder to the container for live updates
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend  # The folder where frontend Dockerfile is located
    container_name: frontend
    ports:
      - "5173:5173"
    networks:
      - app-network
    depends_on:
      - backend  # Frontend depends on backend to be running first
      
  nginx:
    image: nginx:latest
    container_name: nginx
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
    volumes:
      - ${NGINX_CONF_PATH_CONTAINER}:${NGINX_CONF_PATH_HOST}     # Nginx configuration
      - ${SSL_CERT_PATH_CONTAINER}:${SSL_CERT_PATH_HOST}         # SSL certificate directory
      - ${SSL_KEY_PATH_CONTAINER}:${SSL_KEY_PATH_HOST}           # SSL key directory
    depends_on:
      - frontend
      - backend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge  # A bridge network for the services to communicate

volumes:
  mysql-data:  # A volume to store MySQL data
